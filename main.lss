
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  00000722  000007b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000110  00800134  00800134  000007ea  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  000007ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002b7  00000000  00000000  0000082a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000838  00000000  00000000  00000ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000310  00000000  00000000  00001319  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a8  00000000  00000000  00001629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  00001f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000363  00000000  00000000  00002335  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 49 03 	jmp	0x692	; 0x692 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e2       	ldi	r30, 0x22	; 34
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 33       	cpi	r26, 0x34	; 52
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a4 e3       	ldi	r26, 0x34	; 52
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 34       	cpi	r26, 0x44	; 68
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 8f 03 	jmp	0x71e	; 0x71e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "uart.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  UART_Init(9600);
  aa:	60 e8       	ldi	r22, 0x80	; 128
  ac:	75 e2       	ldi	r23, 0x25	; 37
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <UART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	c0 e2       	ldi	r28, 0x20	; 32
  b8:	de e4       	ldi	r29, 0x4E	; 78
  
  
  while(1){
  
    if(UART_Bytes_Available_To_Read()>0){
  ba:	0e 94 b0 02 	call	0x560	; 0x560 <UART_Bytes_Available_To_Read>
  be:	89 2b       	or	r24, r25
  c0:	c1 f1       	breq	.+112    	; 0x132 <main+0x8c>

      UART_Transmit_Text("Buffer Index:");
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	91 e0       	ldi	r25, 0x01	; 1
  c6:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
      UART_Transmit_Number(UART_Current_Buffer_Index());
  ca:	0e 94 a4 02 	call	0x548	; 0x548 <UART_Current_Buffer_Index>
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	bc 01       	movw	r22, r24
  d4:	cd 01       	movw	r24, r26
  d6:	0e 94 04 02 	call	0x408	; 0x408 <UART_Transmit_Number>
      UART_Transmit_Text(" ");
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
     
      UART_Transmit_Text("Available Bytes:");
  e2:	80 e1       	ldi	r24, 0x10	; 16
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
      UART_Transmit_Number(UART_Bytes_Available_To_Read());
  ea:	0e 94 b0 02 	call	0x560	; 0x560 <UART_Bytes_Available_To_Read>
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	bc 01       	movw	r22, r24
  f4:	cd 01       	movw	r24, r26
  f6:	0e 94 04 02 	call	0x408	; 0x408 <UART_Transmit_Number>
      UART_Transmit_Text(" ");
  fa:	8e e0       	ldi	r24, 0x0E	; 14
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
     
      UART_Transmit_Text("Read Index:");
 102:	81 e2       	ldi	r24, 0x21	; 33
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
      UART_Transmit_Number(UART_Current_Read_Index());
 10a:	0e 94 aa 02 	call	0x554	; 0x554 <UART_Current_Read_Index>
 10e:	a0 e0       	ldi	r26, 0x00	; 0
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	bc 01       	movw	r22, r24
 114:	cd 01       	movw	r24, r26
 116:	0e 94 04 02 	call	0x408	; 0x408 <UART_Transmit_Number>
      UART_Transmit_Text(" ");
 11a:	8e e0       	ldi	r24, 0x0E	; 14
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
     
      UART_Transmit_Byte(UART_Read());
 122:	0e 94 b6 02 	call	0x56c	; 0x56c <UART_Read>
 126:	0e 94 29 01 	call	0x252	; 0x252 <UART_Transmit_Byte>
      UART_Transmit_Text("\r\n");
 12a:	8d e2       	ldi	r24, 0x2D	; 45
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
 132:	ce 01       	movw	r24, r28
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <main+0x8e>
 138:	c0 cf       	rjmp	.-128    	; 0xba <main+0x14>

0000013a <UART_Struct_Init>:


uart_t UART;

void UART_Struct_Init(void){
    UART.BufferSize=UART_BUF_SIZE;
 13a:	8a ef       	ldi	r24, 0xFA	; 250
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 39 02 	sts	0x0239, r25
 142:	80 93 38 02 	sts	0x0238, r24
    UART.Error=0x00;
 146:	10 92 34 01 	sts	0x0134, r1
    UART.AvailableBytes=0x00;
 14a:	10 92 3d 02 	sts	0x023D, r1
 14e:	10 92 3c 02 	sts	0x023C, r1
    UART.ReadIndex=0x00;
 152:	10 92 3f 02 	sts	0x023F, r1
 156:	10 92 3e 02 	sts	0x023E, r1
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	04 c0       	rjmp	.+8      	; 0x166 <UART_Struct_Init+0x2c>
    for(uint8_t i=0;i<UART.BufferSize;i++){
        UART.Buffer[i]=0;
 15e:	ec 5c       	subi	r30, 0xCC	; 204
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	12 86       	std	Z+10, r1	; 0x0a
void UART_Struct_Init(void){
    UART.BufferSize=UART_BUF_SIZE;
    UART.Error=0x00;
    UART.AvailableBytes=0x00;
    UART.ReadIndex=0x00;
    for(uint8_t i=0;i<UART.BufferSize;i++){
 164:	2f 5f       	subi	r18, 0xFF	; 255
 166:	80 91 38 02 	lds	r24, 0x0238
 16a:	90 91 39 02 	lds	r25, 0x0239
 16e:	e2 2f       	mov	r30, r18
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e8 17       	cp	r30, r24
 174:	f9 07       	cpc	r31, r25
 176:	98 f3       	brcs	.-26     	; 0x15e <UART_Struct_Init+0x24>
 178:	e5 e3       	ldi	r30, 0x35	; 53
 17a:	f1 e0       	ldi	r31, 0x01	; 1
        UART.Buffer[i]=0;
    }
    for(uint8_t i=0;i<8;i++){
        UART.Digits[i]=0;
 17c:	11 92       	st	Z+, r1
    UART.AvailableBytes=0x00;
    UART.ReadIndex=0x00;
    for(uint8_t i=0;i<UART.BufferSize;i++){
        UART.Buffer[i]=0;
    }
    for(uint8_t i=0;i<8;i++){
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	ed 33       	cpi	r30, 0x3D	; 61
 182:	f8 07       	cpc	r31, r24
 184:	d9 f7       	brne	.-10     	; 0x17c <UART_Struct_Init+0x42>
        UART.Digits[i]=0;
    }
    UART.InputNumberDigits=0;
 186:	10 82       	st	Z, r1
    UART.BufferIndex=0;
 188:	10 92 3b 02 	sts	0x023B, r1
 18c:	10 92 3a 02 	sts	0x023A, r1
    UART.LastRecivedTimeStamp=0;
 190:	10 92 40 02 	sts	0x0240, r1
 194:	10 92 41 02 	sts	0x0241, r1
 198:	10 92 42 02 	sts	0x0242, r1
 19c:	10 92 43 02 	sts	0x0243, r1
}
 1a0:	08 95       	ret

000001a2 <UART_Config_Transmitter>:

void UART_Config_Transmitter(void){
    UCSRxB_REG|=UCSRxB_TXENx_bm;
 1a2:	e1 ec       	ldi	r30, 0xC1	; 193
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 1ac:	e2 ec       	ldi	r30, 0xC2	; 194
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	86 60       	ori	r24, 0x06	; 6
 1b4:	80 83       	st	Z, r24
}
 1b6:	08 95       	ret

000001b8 <UART_Config_Receiver>:

void UART_Config_Receiver(void){
    UCSRxB_REG|=UCSRxB_RXENx_bm;
 1b8:	e1 ec       	ldi	r30, 0xC1	; 193
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 61       	ori	r24, 0x10	; 16
 1c0:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 1c2:	e2 ec       	ldi	r30, 0xC2	; 194
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	86 60       	ori	r24, 0x06	; 6
 1ca:	80 83       	st	Z, r24
}
 1cc:	08 95       	ret

000001ce <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
    UCSRxB_REG|=UCSRxB_RXCIEx_bm;
 1ce:	e1 ec       	ldi	r30, 0xC1	; 193
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 68       	ori	r24, 0x80	; 128
 1d6:	80 83       	st	Z, r24
    sei();
 1d8:	78 94       	sei
}
 1da:	08 95       	ret

000001dc <UART_Init>:

void UART_Init(uint32_t BAUD){
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	9b 01       	movw	r18, r22
 1e6:	ac 01       	movw	r20, r24
    uint32_t BRG_VAL=F_CPU;
    BRG_VAL=((BRG_VAL/16)/BAUD)-1;
    UBRRxH_REG =0x00;
 1e8:	10 92 c5 00 	sts	0x00C5, r1
    UBRRxL_REG =BRG_VAL;
 1ec:	60 e2       	ldi	r22, 0x20	; 32
 1ee:	71 ea       	ldi	r23, 0xA1	; 161
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 6d 03 	call	0x6da	; 0x6da <__udivmodsi4>
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	30 40       	sbci	r19, 0x00	; 0
 1fc:	40 40       	sbci	r20, 0x00	; 0
 1fe:	50 40       	sbci	r21, 0x00	; 0
 200:	20 93 c4 00 	sts	0x00C4, r18
    UCSRxA_REG=0x00;
 204:	10 92 c0 00 	sts	0x00C0, r1
    UCSRxB_REG=0x00;
 208:	01 ec       	ldi	r16, 0xC1	; 193
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	f8 01       	movw	r30, r16
 20e:	10 82       	st	Z, r1
    UCSRxC_REG=0x00;
 210:	82 ec       	ldi	r24, 0xC2	; 194
 212:	e8 2e       	mov	r14, r24
 214:	f1 2c       	mov	r15, r1
 216:	f7 01       	movw	r30, r14
 218:	10 82       	st	Z, r1
    UART_Struct_Init();
 21a:	0e 94 9d 00 	call	0x13a	; 0x13a <UART_Struct_Init>
    UART.BufferIndex=0;
    UART.LastRecivedTimeStamp=0;
}

void UART_Config_Transmitter(void){
    UCSRxB_REG|=UCSRxB_TXENx_bm;
 21e:	f8 01       	movw	r30, r16
 220:	80 81       	ld	r24, Z
 222:	88 60       	ori	r24, 0x08	; 8
 224:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 226:	f7 01       	movw	r30, r14
 228:	80 81       	ld	r24, Z
 22a:	86 60       	ori	r24, 0x06	; 6
 22c:	80 83       	st	Z, r24
}

void UART_Config_Receiver(void){
    UCSRxB_REG|=UCSRxB_RXENx_bm;
 22e:	f8 01       	movw	r30, r16
 230:	80 81       	ld	r24, Z
 232:	80 61       	ori	r24, 0x10	; 16
 234:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 236:	f7 01       	movw	r30, r14
 238:	80 81       	ld	r24, Z
 23a:	86 60       	ori	r24, 0x06	; 6
 23c:	80 83       	st	Z, r24
}

void UART_Config_Receiver_Interrupt(void){
    UCSRxB_REG|=UCSRxB_RXCIEx_bm;
 23e:	f8 01       	movw	r30, r16
 240:	80 81       	ld	r24, Z
 242:	80 68       	ori	r24, 0x80	; 128
 244:	80 83       	st	Z, r24
    sei();
 246:	78 94       	sei
      UART_Config_Receiver();
    }
    if(UART_ENABLE_RX_INT){
      UART_Config_Receiver_Interrupt();
    }
}
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	08 95       	ret

00000252 <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 252:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 256:	80 91 c0 00 	lds	r24, 0x00C0
 25a:	85 ff       	sbrs	r24, 5
 25c:	fc cf       	rjmp	.-8      	; 0x256 <UART_Transmit_Byte+0x4>
}
 25e:	08 95       	ret

00000260 <UART_Transmit_Byte_Hex>:

void UART_Transmit_Byte_Hex(uint8_t val){
    uint8_t hex_digits[2];
    hex_digits[0]=(uint8_t)(val>>4);
 260:	98 2f       	mov	r25, r24
 262:	92 95       	swap	r25
 264:	9f 70       	andi	r25, 0x0F	; 15
    hex_digits[1]=(uint8_t)(val & 0x0F);
 266:	8f 70       	andi	r24, 0x0F	; 15
    if(hex_digits[0]>9){hex_digits[0]+=55;}
 268:	9a 30       	cpi	r25, 0x0A	; 10
 26a:	18 f0       	brcs	.+6      	; 0x272 <UART_Transmit_Byte_Hex+0x12>
 26c:	29 2f       	mov	r18, r25
 26e:	29 5c       	subi	r18, 0xC9	; 201
 270:	02 c0       	rjmp	.+4      	; 0x276 <UART_Transmit_Byte_Hex+0x16>
    else {hex_digits[0]+=48;}
 272:	29 2f       	mov	r18, r25
 274:	20 5d       	subi	r18, 0xD0	; 208
    if(hex_digits[1]>9){hex_digits[1]+=55;}
 276:	8a 30       	cpi	r24, 0x0A	; 10
 278:	18 f0       	brcs	.+6      	; 0x280 <UART_Transmit_Byte_Hex+0x20>
 27a:	98 2f       	mov	r25, r24
 27c:	99 5c       	subi	r25, 0xC9	; 201
 27e:	02 c0       	rjmp	.+4      	; 0x284 <UART_Transmit_Byte_Hex+0x24>
    else {hex_digits[1]+=48;}
 280:	98 2f       	mov	r25, r24
 282:	90 5d       	subi	r25, 0xD0	; 208
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 284:	80 e3       	ldi	r24, 0x30	; 48
 286:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 28a:	80 91 c0 00 	lds	r24, 0x00C0
 28e:	85 ff       	sbrs	r24, 5
 290:	fc cf       	rjmp	.-8      	; 0x28a <UART_Transmit_Byte_Hex+0x2a>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 292:	88 e7       	ldi	r24, 0x78	; 120
 294:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 298:	80 91 c0 00 	lds	r24, 0x00C0
 29c:	85 ff       	sbrs	r24, 5
 29e:	fc cf       	rjmp	.-8      	; 0x298 <UART_Transmit_Byte_Hex+0x38>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 2a0:	20 93 c6 00 	sts	0x00C6, r18
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 2a4:	80 91 c0 00 	lds	r24, 0x00C0
 2a8:	85 ff       	sbrs	r24, 5
 2aa:	fc cf       	rjmp	.-8      	; 0x2a4 <UART_Transmit_Byte_Hex+0x44>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 2ac:	90 93 c6 00 	sts	0x00C6, r25
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 2b0:	80 91 c0 00 	lds	r24, 0x00C0
 2b4:	85 ff       	sbrs	r24, 5
 2b6:	fc cf       	rjmp	.-8      	; 0x2b0 <UART_Transmit_Byte_Hex+0x50>
    else {hex_digits[1]+=48;}
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('x');
    UART_Transmit_Byte(hex_digits[0]);
    UART_Transmit_Byte(hex_digits[1]);
}
 2b8:	08 95       	ret

000002ba <UART_Transmit_Byte_Bin>:

void UART_Transmit_Byte_Bin(uint8_t val){
 2ba:	df 93       	push	r29
 2bc:	cf 93       	push	r28
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	28 97       	sbiw	r28, 0x08	; 8
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	f8 94       	cli
 2c8:	de bf       	out	0x3e, r29	; 62
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	cd bf       	out	0x3d, r28	; 61
 2ce:	98 2f       	mov	r25, r24
 2d0:	fe 01       	movw	r30, r28
 2d2:	31 96       	adiw	r30, 0x01	; 1
    uint8_t bin_digits[8];
    for(uint8_t i=0;i<8;i++){
 2d4:	9e 01       	movw	r18, r28
 2d6:	27 5f       	subi	r18, 0xF7	; 247
 2d8:	3f 4f       	sbci	r19, 0xFF	; 255
        bin_digits[i]= (uint8_t)((val & 0x01)+48);
 2da:	89 2f       	mov	r24, r25
 2dc:	81 70       	andi	r24, 0x01	; 1
 2de:	80 5d       	subi	r24, 0xD0	; 208
 2e0:	81 93       	st	Z+, r24
        val>>=1;
 2e2:	96 95       	lsr	r25
    UART_Transmit_Byte(hex_digits[1]);
}

void UART_Transmit_Byte_Bin(uint8_t val){
    uint8_t bin_digits[8];
    for(uint8_t i=0;i<8;i++){
 2e4:	e2 17       	cp	r30, r18
 2e6:	f3 07       	cpc	r31, r19
 2e8:	c1 f7       	brne	.-16     	; 0x2da <UART_Transmit_Byte_Bin+0x20>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 2ea:	80 e3       	ldi	r24, 0x30	; 48
 2ec:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 2f0:	80 91 c0 00 	lds	r24, 0x00C0
 2f4:	85 ff       	sbrs	r24, 5
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <UART_Transmit_Byte_Bin+0x36>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 2f8:	82 e6       	ldi	r24, 0x62	; 98
 2fa:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 2fe:	80 91 c0 00 	lds	r24, 0x00C0
 302:	85 ff       	sbrs	r24, 5
 304:	fc cf       	rjmp	.-8      	; 0x2fe <UART_Transmit_Byte_Bin+0x44>
 306:	88 e0       	ldi	r24, 0x08	; 8
    }
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('b');
    for(uint8_t i=8;i>0;i--){
        uint8_t index=(uint8_t)(i-1);
        UART_Transmit_Byte(bin_digits[index]);
 308:	9e 01       	movw	r18, r28
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
        val>>=1;
    }
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('b');
    for(uint8_t i=8;i>0;i--){
        uint8_t index=(uint8_t)(i-1);
 30e:	98 2f       	mov	r25, r24
 310:	91 50       	subi	r25, 0x01	; 1
        UART_Transmit_Byte(bin_digits[index]);
 312:	f9 01       	movw	r30, r18
 314:	e9 0f       	add	r30, r25
 316:	f1 1d       	adc	r31, r1
 318:	80 81       	ld	r24, Z
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 31a:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 31e:	80 91 c0 00 	lds	r24, 0x00C0
 322:	85 ff       	sbrs	r24, 5
 324:	fc cf       	rjmp	.-8      	; 0x31e <UART_Transmit_Byte_Bin+0x64>
 326:	89 2f       	mov	r24, r25
        bin_digits[i]= (uint8_t)((val & 0x01)+48);
        val>>=1;
    }
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('b');
    for(uint8_t i=8;i>0;i--){
 328:	99 23       	and	r25, r25
 32a:	89 f7       	brne	.-30     	; 0x30e <UART_Transmit_Byte_Bin+0x54>
        uint8_t index=(uint8_t)(i-1);
        UART_Transmit_Byte(bin_digits[index]);
    }
}
 32c:	28 96       	adiw	r28, 0x08	; 8
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	f8 94       	cli
 332:	de bf       	out	0x3e, r29	; 62
 334:	0f be       	out	0x3f, r0	; 63
 336:	cd bf       	out	0x3d, r28	; 61
 338:	cf 91       	pop	r28
 33a:	df 91       	pop	r29
 33c:	08 95       	ret

0000033e <UART_Transmit_Text>:

void UART_Transmit_Text(char *str){
 33e:	ac 01       	movw	r20, r24
 340:	20 e0       	ldi	r18, 0x00	; 0
 342:	07 c0       	rjmp	.+14     	; 0x352 <UART_Transmit_Text+0x14>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 344:	e0 93 c6 00 	sts	0x00C6, r30
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 348:	80 91 c0 00 	lds	r24, 0x00C0
 34c:	85 ff       	sbrs	r24, 5
 34e:	fc cf       	rjmp	.-8      	; 0x348 <UART_Transmit_Text+0xa>

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 350:	2f 5f       	subi	r18, 0xFF	; 255
    }
}

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 352:	fa 01       	movw	r30, r20
 354:	e2 0f       	add	r30, r18
 356:	f1 1d       	adc	r31, r1
 358:	e0 81       	ld	r30, Z
 35a:	ee 23       	and	r30, r30
 35c:	99 f7       	brne	.-26     	; 0x344 <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 35e:	08 95       	ret

00000360 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 360:	bf 92       	push	r11
 362:	cf 92       	push	r12
 364:	df 92       	push	r13
 366:	ef 92       	push	r14
 368:	ff 92       	push	r15
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	6b 01       	movw	r12, r22
 370:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 372:	61 15       	cp	r22, r1
 374:	71 05       	cpc	r23, r1
 376:	81 05       	cpc	r24, r1
 378:	91 05       	cpc	r25, r1
 37a:	31 f4       	brne	.+12     	; 0x388 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 37c:	10 92 35 01 	sts	0x0135, r1
    UART.InputNumberDigits=1;
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	80 93 3d 01 	sts	0x013D, r24
 386:	23 c0       	rjmp	.+70     	; 0x3ce <UART_Determine_Digit_Numbers+0x6e>
 388:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 38a:	0b 2d       	mov	r16, r11
 38c:	10 e0       	ldi	r17, 0x00	; 0
 38e:	0c 5c       	subi	r16, 0xCC	; 204
 390:	1e 4f       	sbci	r17, 0xFE	; 254
 392:	c7 01       	movw	r24, r14
 394:	b6 01       	movw	r22, r12
 396:	2a e0       	ldi	r18, 0x0A	; 10
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	0e 94 6d 03 	call	0x6da	; 0x6da <__udivmodsi4>
 3a2:	f8 01       	movw	r30, r16
 3a4:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 3a6:	c7 01       	movw	r24, r14
 3a8:	b6 01       	movw	r22, r12
 3aa:	2a e0       	ldi	r18, 0x0A	; 10
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	50 e0       	ldi	r21, 0x00	; 0
 3b2:	0e 94 6d 03 	call	0x6da	; 0x6da <__udivmodsi4>
 3b6:	c9 01       	movw	r24, r18
 3b8:	da 01       	movw	r26, r20
 3ba:	6c 01       	movw	r12, r24
 3bc:	7d 01       	movw	r14, r26
      i++;
 3be:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 3c0:	c1 14       	cp	r12, r1
 3c2:	d1 04       	cpc	r13, r1
 3c4:	e1 04       	cpc	r14, r1
 3c6:	f1 04       	cpc	r15, r1
 3c8:	01 f7       	brne	.-64     	; 0x38a <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 3ca:	b0 92 3d 01 	sts	0x013D, r11
  }
}
 3ce:	1f 91       	pop	r17
 3d0:	0f 91       	pop	r16
 3d2:	ff 90       	pop	r15
 3d4:	ef 90       	pop	r14
 3d6:	df 90       	pop	r13
 3d8:	cf 90       	pop	r12
 3da:	bf 90       	pop	r11
 3dc:	08 95       	ret

000003de <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 3de:	90 91 3d 01 	lds	r25, 0x013D
 3e2:	0f c0       	rjmp	.+30     	; 0x402 <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 3e4:	29 2f       	mov	r18, r25
 3e6:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 3e8:	e2 2f       	mov	r30, r18
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	ec 5c       	subi	r30, 0xCC	; 204
 3ee:	fe 4f       	sbci	r31, 0xFE	; 254
 3f0:	81 81       	ldd	r24, Z+1	; 0x01
    temp+=48;
 3f2:	80 5d       	subi	r24, 0xD0	; 208
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 3f4:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 3f8:	80 91 c0 00 	lds	r24, 0x00C0
 3fc:	92 2f       	mov	r25, r18
 3fe:	85 ff       	sbrs	r24, 5
 400:	fb cf       	rjmp	.-10     	; 0x3f8 <UART_Transmit_Number_Digits+0x1a>
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 402:	99 23       	and	r25, r25
 404:	79 f7       	brne	.-34     	; 0x3e4 <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 406:	08 95       	ret

00000408 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 408:	9b 01       	movw	r18, r22
 40a:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 40c:	97 ff       	sbrs	r25, 7
 40e:	0e c0       	rjmp	.+28     	; 0x42c <UART_Transmit_Number+0x24>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 410:	8d e2       	ldi	r24, 0x2D	; 45
 412:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 416:	80 91 c0 00 	lds	r24, 0x00C0
 41a:	85 ff       	sbrs	r24, 5
 41c:	fc cf       	rjmp	.-8      	; 0x416 <UART_Transmit_Number+0xe>
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 41e:	50 95       	com	r21
 420:	40 95       	com	r20
 422:	30 95       	com	r19
 424:	21 95       	neg	r18
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	4f 4f       	sbci	r20, 0xFF	; 255
 42a:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 42c:	ca 01       	movw	r24, r20
 42e:	b9 01       	movw	r22, r18
 430:	0e 94 b0 01 	call	0x360	; 0x360 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 434:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Transmit_Number_Digits>
}
 438:	08 95       	ret

0000043a <UART_Transmit_Fixed_Digit_Number>:

void UART_Transmit_Fixed_Digit_Number(int32_t num, uint8_t digits){
 43a:	ff 92       	push	r15
 43c:	0f 93       	push	r16
 43e:	1f 93       	push	r17
 440:	8b 01       	movw	r16, r22
 442:	9c 01       	movw	r18, r24
 444:	f4 2e       	mov	r15, r20
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 446:	97 ff       	sbrs	r25, 7
 448:	0e c0       	rjmp	.+28     	; 0x466 <UART_Transmit_Fixed_Digit_Number+0x2c>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 44a:	8d e2       	ldi	r24, 0x2D	; 45
 44c:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 450:	80 91 c0 00 	lds	r24, 0x00C0
 454:	85 ff       	sbrs	r24, 5
 456:	fc cf       	rjmp	.-8      	; 0x450 <UART_Transmit_Fixed_Digit_Number+0x16>
  UART_Determine_Digit_Numbers((uint32_t)num);
  UART_Transmit_Number_Digits();
}

void UART_Transmit_Fixed_Digit_Number(int32_t num, uint8_t digits){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 458:	30 95       	com	r19
 45a:	20 95       	com	r18
 45c:	10 95       	com	r17
 45e:	01 95       	neg	r16
 460:	1f 4f       	sbci	r17, 0xFF	; 255
 462:	2f 4f       	sbci	r18, 0xFF	; 255
 464:	3f 4f       	sbci	r19, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 466:	c9 01       	movw	r24, r18
 468:	b8 01       	movw	r22, r16
 46a:	0e 94 b0 01 	call	0x360	; 0x360 <UART_Determine_Digit_Numbers>
  for(int i=0;i<(digits-UART.InputNumberDigits);i++){
 46e:	4f 2d       	mov	r20, r15
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	80 91 3d 01 	lds	r24, 0x013D
 476:	48 1b       	sub	r20, r24
 478:	51 09       	sbc	r21, r1
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 47e:	90 e3       	ldi	r25, 0x30	; 48
 480:	08 c0       	rjmp	.+16     	; 0x492 <UART_Transmit_Fixed_Digit_Number+0x58>
 482:	90 93 c6 00 	sts	0x00C6, r25
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 486:	80 91 c0 00 	lds	r24, 0x00C0
 48a:	85 ff       	sbrs	r24, 5
 48c:	fc cf       	rjmp	.-8      	; 0x486 <UART_Transmit_Fixed_Digit_Number+0x4c>
}

void UART_Transmit_Fixed_Digit_Number(int32_t num, uint8_t digits){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
  UART_Determine_Digit_Numbers((uint32_t)num);
  for(int i=0;i<(digits-UART.InputNumberDigits);i++){
 48e:	2f 5f       	subi	r18, 0xFF	; 255
 490:	3f 4f       	sbci	r19, 0xFF	; 255
 492:	24 17       	cp	r18, r20
 494:	35 07       	cpc	r19, r21
 496:	ac f3       	brlt	.-22     	; 0x482 <UART_Transmit_Fixed_Digit_Number+0x48>
    UART_Transmit_Byte(48);
  }
  UART_Transmit_Number_Digits();
 498:	0e 94 ef 01 	call	0x3de	; 0x3de <UART_Transmit_Number_Digits>
}
 49c:	1f 91       	pop	r17
 49e:	0f 91       	pop	r16
 4a0:	ff 90       	pop	r15
 4a2:	08 95       	ret

000004a4 <UART_Print_Debug_Data>:

void UART_Print_Debug_Data(int *data_in){
 4a4:	ef 92       	push	r14
 4a6:	ff 92       	push	r15
 4a8:	0f 93       	push	r16
 4aa:	1f 93       	push	r17
 4ac:	cf 93       	push	r28
 4ae:	df 93       	push	r29
 4b0:	7c 01       	movw	r14, r24
 4b2:	8c 01       	movw	r16, r24
 4b4:	c1 e0       	ldi	r28, 0x01	; 1
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <UART_Print_Debug_Data+0x34>
  for(int i=1;i<=data_in[0];i++){
    UART_Transmit_Fixed_Digit_Number(data_in[i], 4);
 4ba:	f8 01       	movw	r30, r16
 4bc:	60 81       	ld	r22, Z
 4be:	71 81       	ldd	r23, Z+1	; 0x01
 4c0:	88 27       	eor	r24, r24
 4c2:	77 fd       	sbrc	r23, 7
 4c4:	80 95       	com	r24
 4c6:	98 2f       	mov	r25, r24
 4c8:	44 e0       	ldi	r20, 0x04	; 4
 4ca:	0e 94 1d 02 	call	0x43a	; 0x43a <UART_Transmit_Fixed_Digit_Number>
    UART_Transmit_Text("  ");
 4ce:	80 e3       	ldi	r24, 0x30	; 48
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	0e 94 9f 01 	call	0x33e	; 0x33e <UART_Transmit_Text>
  }
  UART_Transmit_Number_Digits();
}

void UART_Print_Debug_Data(int *data_in){
  for(int i=1;i<=data_in[0];i++){
 4d6:	21 96       	adiw	r28, 0x01	; 1
 4d8:	0e 5f       	subi	r16, 0xFE	; 254
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
 4dc:	f7 01       	movw	r30, r14
 4de:	80 81       	ld	r24, Z
 4e0:	91 81       	ldd	r25, Z+1	; 0x01
 4e2:	8c 17       	cp	r24, r28
 4e4:	9d 07       	cpc	r25, r29
 4e6:	4c f7       	brge	.-46     	; 0x4ba <UART_Print_Debug_Data+0x16>
    UART_Transmit_Fixed_Digit_Number(data_in[i], 4);
    UART_Transmit_Text("  ");
  }
}
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	1f 91       	pop	r17
 4ee:	0f 91       	pop	r16
 4f0:	ff 90       	pop	r15
 4f2:	ef 90       	pop	r14
 4f4:	08 95       	ret

000004f6 <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 4f6:	df 93       	push	r29
 4f8:	cf 93       	push	r28
 4fa:	0f 92       	push	r0
 4fc:	cd b7       	in	r28, 0x3d	; 61
 4fe:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 500:	19 82       	std	Y+1, r1	; 0x01
  if(UCSRxA_REG & UCSRxA_FEx_bm){
 502:	80 91 c0 00 	lds	r24, 0x00C0
 506:	84 ff       	sbrs	r24, 4
 508:	05 c0       	rjmp	.+10     	; 0x514 <UART_Receive_Byte+0x1e>
    val=UDRx_REG;
 50a:	80 91 c6 00 	lds	r24, 0x00C6
 50e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	08 c0       	rjmp	.+16     	; 0x524 <UART_Receive_Byte+0x2e>
  }else if(UCSRxA_REG & UCSRxA_DORx_bm){
 514:	80 91 c0 00 	lds	r24, 0x00C0
 518:	83 ff       	sbrs	r24, 3
 51a:	07 c0       	rjmp	.+14     	; 0x52a <UART_Receive_Byte+0x34>
    val=UDRx_REG;
 51c:	80 91 c6 00 	lds	r24, 0x00C6
 520:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 522:	82 e0       	ldi	r24, 0x02	; 2
 524:	80 93 34 01 	sts	0x0134, r24
 528:	05 c0       	rjmp	.+10     	; 0x534 <UART_Receive_Byte+0x3e>
  }else{
    val=UDRx_REG;
 52a:	80 91 c6 00 	lds	r24, 0x00C6
 52e:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 530:	10 92 34 01 	sts	0x0134, r1
  }
return val;
 534:	89 81       	ldd	r24, Y+1	; 0x01
}
 536:	0f 90       	pop	r0
 538:	cf 91       	pop	r28
 53a:	df 91       	pop	r29
 53c:	08 95       	ret

0000053e <UART_Read_From_Buffer>:


uint8_t UART_Read_From_Buffer(uint16_t index){
    return UART.Buffer[index];
 53e:	fc 01       	movw	r30, r24
 540:	ec 5c       	subi	r30, 0xCC	; 204
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	82 85       	ldd	r24, Z+10	; 0x0a
}
 546:	08 95       	ret

00000548 <UART_Current_Buffer_Index>:

uint16_t UART_Current_Buffer_Index(void){
    return UART.BufferIndex;
 548:	20 91 3a 02 	lds	r18, 0x023A
 54c:	30 91 3b 02 	lds	r19, 0x023B
}
 550:	c9 01       	movw	r24, r18
 552:	08 95       	ret

00000554 <UART_Current_Read_Index>:

uint16_t UART_Current_Read_Index(void){
    return UART.ReadIndex;
 554:	20 91 3e 02 	lds	r18, 0x023E
 558:	30 91 3f 02 	lds	r19, 0x023F
}
 55c:	c9 01       	movw	r24, r18
 55e:	08 95       	ret

00000560 <UART_Bytes_Available_To_Read>:

uint16_t UART_Bytes_Available_To_Read(void){
    return UART.AvailableBytes;
 560:	20 91 3c 02 	lds	r18, 0x023C
 564:	30 91 3d 02 	lds	r19, 0x023D
}
 568:	c9 01       	movw	r24, r18
 56a:	08 95       	ret

0000056c <UART_Read>:

uint8_t UART_Read(void){
    uint8_t current_byte=UART.Buffer[UART.ReadIndex];
 56c:	e0 91 3e 02 	lds	r30, 0x023E
 570:	f0 91 3f 02 	lds	r31, 0x023F
 574:	ec 5c       	subi	r30, 0xCC	; 204
 576:	fe 4f       	sbci	r31, 0xFE	; 254
 578:	42 85       	ldd	r20, Z+10	; 0x0a
    UART.ReadIndex++;
 57a:	80 91 3e 02 	lds	r24, 0x023E
 57e:	90 91 3f 02 	lds	r25, 0x023F
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	90 93 3f 02 	sts	0x023F, r25
 588:	80 93 3e 02 	sts	0x023E, r24
    if(UART.ReadIndex>=UART.BufferSize){
 58c:	20 91 3e 02 	lds	r18, 0x023E
 590:	30 91 3f 02 	lds	r19, 0x023F
 594:	80 91 38 02 	lds	r24, 0x0238
 598:	90 91 39 02 	lds	r25, 0x0239
 59c:	28 17       	cp	r18, r24
 59e:	39 07       	cpc	r19, r25
 5a0:	20 f0       	brcs	.+8      	; 0x5aa <UART_Read+0x3e>
      UART.ReadIndex=0;
 5a2:	10 92 3f 02 	sts	0x023F, r1
 5a6:	10 92 3e 02 	sts	0x023E, r1
    }
    if(UART.AvailableBytes>0){
 5aa:	80 91 3c 02 	lds	r24, 0x023C
 5ae:	90 91 3d 02 	lds	r25, 0x023D
 5b2:	89 2b       	or	r24, r25
 5b4:	49 f0       	breq	.+18     	; 0x5c8 <UART_Read+0x5c>
        UART.AvailableBytes--;
 5b6:	80 91 3c 02 	lds	r24, 0x023C
 5ba:	90 91 3d 02 	lds	r25, 0x023D
 5be:	01 97       	sbiw	r24, 0x01	; 1
 5c0:	90 93 3d 02 	sts	0x023D, r25
 5c4:	80 93 3c 02 	sts	0x023C, r24
    }
  return current_byte;
}
 5c8:	84 2f       	mov	r24, r20
 5ca:	08 95       	ret

000005cc <UART_Flush_Buffer>:

void UART_Flush_Buffer(void){
    UART.Error=0x00;
 5cc:	10 92 34 01 	sts	0x0134, r1
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <UART_Flush_Buffer+0x16>
    for(uint16_t i=0;i<UART.BufferSize;i++){
        UART.Buffer[i]=0x00;
 5d6:	f9 01       	movw	r30, r18
 5d8:	ec 5c       	subi	r30, 0xCC	; 204
 5da:	fe 4f       	sbci	r31, 0xFE	; 254
 5dc:	12 86       	std	Z+10, r1	; 0x0a
  return current_byte;
}

void UART_Flush_Buffer(void){
    UART.Error=0x00;
    for(uint16_t i=0;i<UART.BufferSize;i++){
 5de:	2f 5f       	subi	r18, 0xFF	; 255
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	80 91 38 02 	lds	r24, 0x0238
 5e6:	90 91 39 02 	lds	r25, 0x0239
 5ea:	28 17       	cp	r18, r24
 5ec:	39 07       	cpc	r19, r25
 5ee:	98 f3       	brcs	.-26     	; 0x5d6 <UART_Flush_Buffer+0xa>
        UART.Buffer[i]=0x00;
    }
    UART.ReadIndex=0;
 5f0:	10 92 3f 02 	sts	0x023F, r1
 5f4:	10 92 3e 02 	sts	0x023E, r1
    UART.BufferIndex=0;
 5f8:	10 92 3b 02 	sts	0x023B, r1
 5fc:	10 92 3a 02 	sts	0x023A, r1
    UART.AvailableBytes=0;
 600:	10 92 3d 02 	sts	0x023D, r1
 604:	10 92 3c 02 	sts	0x023C, r1
}
 608:	08 95       	ret

0000060a <UART_Last_Byte_Recevied_Time_Stamp>:

uint32_t UART_Last_Byte_Recevied_Time_Stamp(void){
    return UART.LastRecivedTimeStamp;
 60a:	20 91 40 02 	lds	r18, 0x0240
 60e:	30 91 41 02 	lds	r19, 0x0241
 612:	40 91 42 02 	lds	r20, 0x0242
 616:	50 91 43 02 	lds	r21, 0x0243
}
 61a:	b9 01       	movw	r22, r18
 61c:	ca 01       	movw	r24, r20
 61e:	08 95       	ret

00000620 <UART_Interrupt_Service_Routine>:

void UART_Interrupt_Service_Routine(void){
 620:	df 93       	push	r29
 622:	cf 93       	push	r28
 624:	0f 92       	push	r0
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t received_byte=UART_Receive_Byte();
 62a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <UART_Receive_Byte>
 62e:	89 83       	std	Y+1, r24	; 0x01
    if(UART.Error==0x00){
 630:	80 91 34 01 	lds	r24, 0x0134
 634:	88 23       	and	r24, r24
 636:	49 f5       	brne	.+82     	; 0x68a <UART_Interrupt_Service_Routine+0x6a>
         UART.Buffer[UART.BufferIndex]=received_byte;
 638:	e0 91 3a 02 	lds	r30, 0x023A
 63c:	f0 91 3b 02 	lds	r31, 0x023B
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	ec 5c       	subi	r30, 0xCC	; 204
 644:	fe 4f       	sbci	r31, 0xFE	; 254
 646:	82 87       	std	Z+10, r24	; 0x0a
         UART.BufferIndex++;
 648:	80 91 3a 02 	lds	r24, 0x023A
 64c:	90 91 3b 02 	lds	r25, 0x023B
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	90 93 3b 02 	sts	0x023B, r25
 656:	80 93 3a 02 	sts	0x023A, r24
         UART.AvailableBytes++;
 65a:	80 91 3c 02 	lds	r24, 0x023C
 65e:	90 91 3d 02 	lds	r25, 0x023D
 662:	01 96       	adiw	r24, 0x01	; 1
 664:	90 93 3d 02 	sts	0x023D, r25
 668:	80 93 3c 02 	sts	0x023C, r24
         if(UART.BufferIndex>=UART.BufferSize){UART.BufferIndex=0;}
 66c:	20 91 3a 02 	lds	r18, 0x023A
 670:	30 91 3b 02 	lds	r19, 0x023B
 674:	80 91 38 02 	lds	r24, 0x0238
 678:	90 91 39 02 	lds	r25, 0x0239
 67c:	28 17       	cp	r18, r24
 67e:	39 07       	cpc	r19, r25
 680:	20 f0       	brcs	.+8      	; 0x68a <UART_Interrupt_Service_Routine+0x6a>
 682:	10 92 3b 02 	sts	0x023B, r1
 686:	10 92 3a 02 	sts	0x023A, r1
         //UART.LastRecivedTimeStamp=millis();
    }
}
 68a:	0f 90       	pop	r0
 68c:	cf 91       	pop	r28
 68e:	df 91       	pop	r29
 690:	08 95       	ret

00000692 <__vector_18>:

ISR(USART_RX_vect){
 692:	1f 92       	push	r1
 694:	0f 92       	push	r0
 696:	0f b6       	in	r0, 0x3f	; 63
 698:	0f 92       	push	r0
 69a:	11 24       	eor	r1, r1
 69c:	2f 93       	push	r18
 69e:	3f 93       	push	r19
 6a0:	4f 93       	push	r20
 6a2:	5f 93       	push	r21
 6a4:	6f 93       	push	r22
 6a6:	7f 93       	push	r23
 6a8:	8f 93       	push	r24
 6aa:	9f 93       	push	r25
 6ac:	af 93       	push	r26
 6ae:	bf 93       	push	r27
 6b0:	ef 93       	push	r30
 6b2:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 6b4:	0e 94 10 03 	call	0x620	; 0x620 <UART_Interrupt_Service_Routine>
 6b8:	ff 91       	pop	r31
 6ba:	ef 91       	pop	r30
 6bc:	bf 91       	pop	r27
 6be:	af 91       	pop	r26
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	7f 91       	pop	r23
 6c6:	6f 91       	pop	r22
 6c8:	5f 91       	pop	r21
 6ca:	4f 91       	pop	r20
 6cc:	3f 91       	pop	r19
 6ce:	2f 91       	pop	r18
 6d0:	0f 90       	pop	r0
 6d2:	0f be       	out	0x3f, r0	; 63
 6d4:	0f 90       	pop	r0
 6d6:	1f 90       	pop	r1
 6d8:	18 95       	reti

000006da <__udivmodsi4>:
 6da:	a1 e2       	ldi	r26, 0x21	; 33
 6dc:	1a 2e       	mov	r1, r26
 6de:	aa 1b       	sub	r26, r26
 6e0:	bb 1b       	sub	r27, r27
 6e2:	fd 01       	movw	r30, r26
 6e4:	0d c0       	rjmp	.+26     	; 0x700 <__udivmodsi4_ep>

000006e6 <__udivmodsi4_loop>:
 6e6:	aa 1f       	adc	r26, r26
 6e8:	bb 1f       	adc	r27, r27
 6ea:	ee 1f       	adc	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	a2 17       	cp	r26, r18
 6f0:	b3 07       	cpc	r27, r19
 6f2:	e4 07       	cpc	r30, r20
 6f4:	f5 07       	cpc	r31, r21
 6f6:	20 f0       	brcs	.+8      	; 0x700 <__udivmodsi4_ep>
 6f8:	a2 1b       	sub	r26, r18
 6fa:	b3 0b       	sbc	r27, r19
 6fc:	e4 0b       	sbc	r30, r20
 6fe:	f5 0b       	sbc	r31, r21

00000700 <__udivmodsi4_ep>:
 700:	66 1f       	adc	r22, r22
 702:	77 1f       	adc	r23, r23
 704:	88 1f       	adc	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	1a 94       	dec	r1
 70a:	69 f7       	brne	.-38     	; 0x6e6 <__udivmodsi4_loop>
 70c:	60 95       	com	r22
 70e:	70 95       	com	r23
 710:	80 95       	com	r24
 712:	90 95       	com	r25
 714:	9b 01       	movw	r18, r22
 716:	ac 01       	movw	r20, r24
 718:	bd 01       	movw	r22, r26
 71a:	cf 01       	movw	r24, r30
 71c:	08 95       	ret

0000071e <_exit>:
 71e:	f8 94       	cli

00000720 <__stop_program>:
 720:	ff cf       	rjmp	.-2      	; 0x720 <__stop_program>
