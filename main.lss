
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000110  00800104  00800104  00000778  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002b7  00000000  00000000  000007b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000838  00000000  00000000  00000a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000310  00000000  00000000  000012a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000760  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b1  00000000  00000000  00001ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000363  00000000  00000000  00002279  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000025dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 28 03 	jmp	0x650	; 0x650 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
  8a:	12 e0       	ldi	r17, 0x02	; 2
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 31       	cpi	r26, 0x14	; 20
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include <avr/io.h>
#include <util/delay.h>
#include "uart.h"

int main(void){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  
  UART_Init(9600);
  aa:	60 e8       	ldi	r22, 0x80	; 128
  ac:	75 e2       	ldi	r23, 0x25	; 37
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 ba 00 	call	0x174	; 0x174 <UART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b6:	c0 e2       	ldi	r28, 0x20	; 32
  b8:	de e4       	ldi	r29, 0x4E	; 78
  
  
  while(1){
  
    if(UART_Bytes_Available_To_Read()>0){
  ba:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <UART_Bytes_Available_To_Read>
  be:	89 2b       	or	r24, r25
  c0:	21 f0       	breq	.+8      	; 0xca <main+0x24>
      UART_Transmit_Byte(UART_Read());
  c2:	0e 94 82 02 	call	0x504	; 0x504 <UART_Read>
  c6:	0e 94 f5 00 	call	0x1ea	; 0x1ea <UART_Transmit_Byte>
  ca:	ce 01       	movw	r24, r28
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <main+0x26>
  d0:	f4 cf       	rjmp	.-24     	; 0xba <main+0x14>

000000d2 <UART_Struct_Init>:


uart_t UART;

void UART_Struct_Init(void){
    UART.BufferSize=UART_BUF_SIZE;
  d2:	8a ef       	ldi	r24, 0xFA	; 250
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 09 02 	sts	0x0209, r25
  da:	80 93 08 02 	sts	0x0208, r24
    UART.Error=0x00;
  de:	10 92 04 01 	sts	0x0104, r1
    UART.AvailableBytes=0x00;
  e2:	10 92 0d 02 	sts	0x020D, r1
  e6:	10 92 0c 02 	sts	0x020C, r1
    UART.ReadIndex=0x00;
  ea:	10 92 0f 02 	sts	0x020F, r1
  ee:	10 92 0e 02 	sts	0x020E, r1
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	04 c0       	rjmp	.+8      	; 0xfe <UART_Struct_Init+0x2c>
    for(uint8_t i=0;i<UART.BufferSize;i++){
        UART.Buffer[i]=0;
  f6:	ec 5f       	subi	r30, 0xFC	; 252
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	12 86       	std	Z+10, r1	; 0x0a
void UART_Struct_Init(void){
    UART.BufferSize=UART_BUF_SIZE;
    UART.Error=0x00;
    UART.AvailableBytes=0x00;
    UART.ReadIndex=0x00;
    for(uint8_t i=0;i<UART.BufferSize;i++){
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	80 91 08 02 	lds	r24, 0x0208
 102:	90 91 09 02 	lds	r25, 0x0209
 106:	e2 2f       	mov	r30, r18
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	e8 17       	cp	r30, r24
 10c:	f9 07       	cpc	r31, r25
 10e:	98 f3       	brcs	.-26     	; 0xf6 <UART_Struct_Init+0x24>
 110:	e5 e0       	ldi	r30, 0x05	; 5
 112:	f1 e0       	ldi	r31, 0x01	; 1
        UART.Buffer[i]=0;
    }
    for(uint8_t i=0;i<8;i++){
        UART.Digits[i]=0;
 114:	11 92       	st	Z+, r1
    UART.AvailableBytes=0x00;
    UART.ReadIndex=0x00;
    for(uint8_t i=0;i<UART.BufferSize;i++){
        UART.Buffer[i]=0;
    }
    for(uint8_t i=0;i<8;i++){
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	ed 30       	cpi	r30, 0x0D	; 13
 11a:	f8 07       	cpc	r31, r24
 11c:	d9 f7       	brne	.-10     	; 0x114 <UART_Struct_Init+0x42>
        UART.Digits[i]=0;
    }
    UART.InputNumberDigits=0;
 11e:	10 82       	st	Z, r1
    UART.BufferIndex=0;
 120:	10 92 0b 02 	sts	0x020B, r1
 124:	10 92 0a 02 	sts	0x020A, r1
    UART.LastRecivedTimeStamp=0;
 128:	10 92 10 02 	sts	0x0210, r1
 12c:	10 92 11 02 	sts	0x0211, r1
 130:	10 92 12 02 	sts	0x0212, r1
 134:	10 92 13 02 	sts	0x0213, r1
}
 138:	08 95       	ret

0000013a <UART_Config_Transmitter>:

void UART_Config_Transmitter(void){
    UCSRxB_REG|=UCSRxB_TXENx_bm;
 13a:	e1 ec       	ldi	r30, 0xC1	; 193
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 60       	ori	r24, 0x08	; 8
 142:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 144:	e2 ec       	ldi	r30, 0xC2	; 194
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	86 60       	ori	r24, 0x06	; 6
 14c:	80 83       	st	Z, r24
}
 14e:	08 95       	ret

00000150 <UART_Config_Receiver>:

void UART_Config_Receiver(void){
    UCSRxB_REG|=UCSRxB_RXENx_bm;
 150:	e1 ec       	ldi	r30, 0xC1	; 193
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 61       	ori	r24, 0x10	; 16
 158:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 15a:	e2 ec       	ldi	r30, 0xC2	; 194
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	80 81       	ld	r24, Z
 160:	86 60       	ori	r24, 0x06	; 6
 162:	80 83       	st	Z, r24
}
 164:	08 95       	ret

00000166 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
    UCSRxB_REG|=UCSRxB_RXCIEx_bm;
 166:	e1 ec       	ldi	r30, 0xC1	; 193
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 83       	st	Z, r24
    sei();
 170:	78 94       	sei
}
 172:	08 95       	ret

00000174 <UART_Init>:

void UART_Init(uint32_t BAUD){
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	9b 01       	movw	r18, r22
 17e:	ac 01       	movw	r20, r24
    uint32_t BRG_VAL=F_CPU;
    BRG_VAL=((BRG_VAL/16)/BAUD)-1;
    UBRRxH_REG =0x00;
 180:	10 92 c5 00 	sts	0x00C5, r1
    UBRRxL_REG =BRG_VAL;
 184:	60 e2       	ldi	r22, 0x20	; 32
 186:	71 ea       	ldi	r23, 0xA1	; 161
 188:	87 e0       	ldi	r24, 0x07	; 7
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodsi4>
 190:	21 50       	subi	r18, 0x01	; 1
 192:	30 40       	sbci	r19, 0x00	; 0
 194:	40 40       	sbci	r20, 0x00	; 0
 196:	50 40       	sbci	r21, 0x00	; 0
 198:	20 93 c4 00 	sts	0x00C4, r18
    UCSRxA_REG=0x00;
 19c:	10 92 c0 00 	sts	0x00C0, r1
    UCSRxB_REG=0x00;
 1a0:	01 ec       	ldi	r16, 0xC1	; 193
 1a2:	10 e0       	ldi	r17, 0x00	; 0
 1a4:	f8 01       	movw	r30, r16
 1a6:	10 82       	st	Z, r1
    UCSRxC_REG=0x00;
 1a8:	82 ec       	ldi	r24, 0xC2	; 194
 1aa:	e8 2e       	mov	r14, r24
 1ac:	f1 2c       	mov	r15, r1
 1ae:	f7 01       	movw	r30, r14
 1b0:	10 82       	st	Z, r1
    UART_Struct_Init();
 1b2:	0e 94 69 00 	call	0xd2	; 0xd2 <UART_Struct_Init>
    UART.BufferIndex=0;
    UART.LastRecivedTimeStamp=0;
}

void UART_Config_Transmitter(void){
    UCSRxB_REG|=UCSRxB_TXENx_bm;
 1b6:	f8 01       	movw	r30, r16
 1b8:	80 81       	ld	r24, Z
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 1be:	f7 01       	movw	r30, r14
 1c0:	80 81       	ld	r24, Z
 1c2:	86 60       	ori	r24, 0x06	; 6
 1c4:	80 83       	st	Z, r24
}

void UART_Config_Receiver(void){
    UCSRxB_REG|=UCSRxB_RXENx_bm;
 1c6:	f8 01       	movw	r30, r16
 1c8:	80 81       	ld	r24, Z
 1ca:	80 61       	ori	r24, 0x10	; 16
 1cc:	80 83       	st	Z, r24
    UCSRxC_REG|=UCSRxC_UCSZx0_bm|UCSRxC_UCSZx1_bm;
 1ce:	f7 01       	movw	r30, r14
 1d0:	80 81       	ld	r24, Z
 1d2:	86 60       	ori	r24, 0x06	; 6
 1d4:	80 83       	st	Z, r24
}

void UART_Config_Receiver_Interrupt(void){
    UCSRxB_REG|=UCSRxB_RXCIEx_bm;
 1d6:	f8 01       	movw	r30, r16
 1d8:	80 81       	ld	r24, Z
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	80 83       	st	Z, r24
    sei();
 1de:	78 94       	sei
      UART_Config_Receiver();
    }
    if(UART_ENABLE_RX_INT){
      UART_Config_Receiver_Interrupt();
    }
}
 1e0:	1f 91       	pop	r17
 1e2:	0f 91       	pop	r16
 1e4:	ff 90       	pop	r15
 1e6:	ef 90       	pop	r14
 1e8:	08 95       	ret

000001ea <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 1ea:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 1ee:	80 91 c0 00 	lds	r24, 0x00C0
 1f2:	85 ff       	sbrs	r24, 5
 1f4:	fc cf       	rjmp	.-8      	; 0x1ee <UART_Transmit_Byte+0x4>
}
 1f6:	08 95       	ret

000001f8 <UART_Transmit_Byte_Hex>:

void UART_Transmit_Byte_Hex(uint8_t val){
    uint8_t hex_digits[2];
    hex_digits[0]=(uint8_t)(val>>4);
 1f8:	98 2f       	mov	r25, r24
 1fa:	92 95       	swap	r25
 1fc:	9f 70       	andi	r25, 0x0F	; 15
    hex_digits[1]=(uint8_t)(val & 0x0F);
 1fe:	8f 70       	andi	r24, 0x0F	; 15
    if(hex_digits[0]>9){hex_digits[0]+=55;}
 200:	9a 30       	cpi	r25, 0x0A	; 10
 202:	18 f0       	brcs	.+6      	; 0x20a <UART_Transmit_Byte_Hex+0x12>
 204:	29 2f       	mov	r18, r25
 206:	29 5c       	subi	r18, 0xC9	; 201
 208:	02 c0       	rjmp	.+4      	; 0x20e <UART_Transmit_Byte_Hex+0x16>
    else {hex_digits[0]+=48;}
 20a:	29 2f       	mov	r18, r25
 20c:	20 5d       	subi	r18, 0xD0	; 208
    if(hex_digits[1]>9){hex_digits[1]+=55;}
 20e:	8a 30       	cpi	r24, 0x0A	; 10
 210:	18 f0       	brcs	.+6      	; 0x218 <UART_Transmit_Byte_Hex+0x20>
 212:	98 2f       	mov	r25, r24
 214:	99 5c       	subi	r25, 0xC9	; 201
 216:	02 c0       	rjmp	.+4      	; 0x21c <UART_Transmit_Byte_Hex+0x24>
    else {hex_digits[1]+=48;}
 218:	98 2f       	mov	r25, r24
 21a:	90 5d       	subi	r25, 0xD0	; 208
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 21c:	80 e3       	ldi	r24, 0x30	; 48
 21e:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 222:	80 91 c0 00 	lds	r24, 0x00C0
 226:	85 ff       	sbrs	r24, 5
 228:	fc cf       	rjmp	.-8      	; 0x222 <UART_Transmit_Byte_Hex+0x2a>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 22a:	88 e7       	ldi	r24, 0x78	; 120
 22c:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 230:	80 91 c0 00 	lds	r24, 0x00C0
 234:	85 ff       	sbrs	r24, 5
 236:	fc cf       	rjmp	.-8      	; 0x230 <UART_Transmit_Byte_Hex+0x38>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 238:	20 93 c6 00 	sts	0x00C6, r18
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 23c:	80 91 c0 00 	lds	r24, 0x00C0
 240:	85 ff       	sbrs	r24, 5
 242:	fc cf       	rjmp	.-8      	; 0x23c <UART_Transmit_Byte_Hex+0x44>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 244:	90 93 c6 00 	sts	0x00C6, r25
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 248:	80 91 c0 00 	lds	r24, 0x00C0
 24c:	85 ff       	sbrs	r24, 5
 24e:	fc cf       	rjmp	.-8      	; 0x248 <UART_Transmit_Byte_Hex+0x50>
    else {hex_digits[1]+=48;}
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('x');
    UART_Transmit_Byte(hex_digits[0]);
    UART_Transmit_Byte(hex_digits[1]);
}
 250:	08 95       	ret

00000252 <UART_Transmit_Byte_Bin>:

void UART_Transmit_Byte_Bin(uint8_t val){
 252:	df 93       	push	r29
 254:	cf 93       	push	r28
 256:	cd b7       	in	r28, 0x3d	; 61
 258:	de b7       	in	r29, 0x3e	; 62
 25a:	28 97       	sbiw	r28, 0x08	; 8
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	f8 94       	cli
 260:	de bf       	out	0x3e, r29	; 62
 262:	0f be       	out	0x3f, r0	; 63
 264:	cd bf       	out	0x3d, r28	; 61
 266:	98 2f       	mov	r25, r24
 268:	fe 01       	movw	r30, r28
 26a:	31 96       	adiw	r30, 0x01	; 1
    uint8_t bin_digits[8];
    for(uint8_t i=0;i<8;i++){
 26c:	9e 01       	movw	r18, r28
 26e:	27 5f       	subi	r18, 0xF7	; 247
 270:	3f 4f       	sbci	r19, 0xFF	; 255
        bin_digits[i]= (uint8_t)((val & 0x01)+48);
 272:	89 2f       	mov	r24, r25
 274:	81 70       	andi	r24, 0x01	; 1
 276:	80 5d       	subi	r24, 0xD0	; 208
 278:	81 93       	st	Z+, r24
        val>>=1;
 27a:	96 95       	lsr	r25
    UART_Transmit_Byte(hex_digits[1]);
}

void UART_Transmit_Byte_Bin(uint8_t val){
    uint8_t bin_digits[8];
    for(uint8_t i=0;i<8;i++){
 27c:	e2 17       	cp	r30, r18
 27e:	f3 07       	cpc	r31, r19
 280:	c1 f7       	brne	.-16     	; 0x272 <UART_Transmit_Byte_Bin+0x20>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 288:	80 91 c0 00 	lds	r24, 0x00C0
 28c:	85 ff       	sbrs	r24, 5
 28e:	fc cf       	rjmp	.-8      	; 0x288 <UART_Transmit_Byte_Bin+0x36>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 290:	82 e6       	ldi	r24, 0x62	; 98
 292:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 296:	80 91 c0 00 	lds	r24, 0x00C0
 29a:	85 ff       	sbrs	r24, 5
 29c:	fc cf       	rjmp	.-8      	; 0x296 <UART_Transmit_Byte_Bin+0x44>
 29e:	88 e0       	ldi	r24, 0x08	; 8
    }
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('b');
    for(uint8_t i=8;i>0;i--){
        uint8_t index=(uint8_t)(i-1);
        UART_Transmit_Byte(bin_digits[index]);
 2a0:	9e 01       	movw	r18, r28
 2a2:	2f 5f       	subi	r18, 0xFF	; 255
 2a4:	3f 4f       	sbci	r19, 0xFF	; 255
        val>>=1;
    }
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('b');
    for(uint8_t i=8;i>0;i--){
        uint8_t index=(uint8_t)(i-1);
 2a6:	98 2f       	mov	r25, r24
 2a8:	91 50       	subi	r25, 0x01	; 1
        UART_Transmit_Byte(bin_digits[index]);
 2aa:	f9 01       	movw	r30, r18
 2ac:	e9 0f       	add	r30, r25
 2ae:	f1 1d       	adc	r31, r1
 2b0:	80 81       	ld	r24, Z
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 2b2:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 2b6:	80 91 c0 00 	lds	r24, 0x00C0
 2ba:	85 ff       	sbrs	r24, 5
 2bc:	fc cf       	rjmp	.-8      	; 0x2b6 <UART_Transmit_Byte_Bin+0x64>
 2be:	89 2f       	mov	r24, r25
        bin_digits[i]= (uint8_t)((val & 0x01)+48);
        val>>=1;
    }
    UART_Transmit_Byte('0');
    UART_Transmit_Byte('b');
    for(uint8_t i=8;i>0;i--){
 2c0:	99 23       	and	r25, r25
 2c2:	89 f7       	brne	.-30     	; 0x2a6 <UART_Transmit_Byte_Bin+0x54>
        uint8_t index=(uint8_t)(i-1);
        UART_Transmit_Byte(bin_digits[index]);
    }
}
 2c4:	28 96       	adiw	r28, 0x08	; 8
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	cf 91       	pop	r28
 2d2:	df 91       	pop	r29
 2d4:	08 95       	ret

000002d6 <UART_Transmit_Text>:

void UART_Transmit_Text(char *str){
 2d6:	ac 01       	movw	r20, r24
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	07 c0       	rjmp	.+14     	; 0x2ea <UART_Transmit_Text+0x14>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 2dc:	e0 93 c6 00 	sts	0x00C6, r30
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 2e0:	80 91 c0 00 	lds	r24, 0x00C0
 2e4:	85 ff       	sbrs	r24, 5
 2e6:	fc cf       	rjmp	.-8      	; 0x2e0 <UART_Transmit_Text+0xa>

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
        UART_Transmit_Byte(str[i]);
        i++;
 2e8:	2f 5f       	subi	r18, 0xFF	; 255
    }
}

void UART_Transmit_Text(char *str){
    uint8_t i=0;
    while(str[i]!='\0'){
 2ea:	fa 01       	movw	r30, r20
 2ec:	e2 0f       	add	r30, r18
 2ee:	f1 1d       	adc	r31, r1
 2f0:	e0 81       	ld	r30, Z
 2f2:	ee 23       	and	r30, r30
 2f4:	99 f7       	brne	.-26     	; 0x2dc <UART_Transmit_Text+0x6>
        UART_Transmit_Byte(str[i]);
        i++;
    }
}
 2f6:	08 95       	ret

000002f8 <UART_Determine_Digit_Numbers>:

void UART_Determine_Digit_Numbers(uint32_t num){
 2f8:	bf 92       	push	r11
 2fa:	cf 92       	push	r12
 2fc:	df 92       	push	r13
 2fe:	ef 92       	push	r14
 300:	ff 92       	push	r15
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	6b 01       	movw	r12, r22
 308:	7c 01       	movw	r14, r24
  uint8_t i=0;
  if(num==0){
 30a:	61 15       	cp	r22, r1
 30c:	71 05       	cpc	r23, r1
 30e:	81 05       	cpc	r24, r1
 310:	91 05       	cpc	r25, r1
 312:	31 f4       	brne	.+12     	; 0x320 <UART_Determine_Digit_Numbers+0x28>
    UART.Digits[0]=0;
 314:	10 92 05 01 	sts	0x0105, r1
    UART.InputNumberDigits=1;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	80 93 0d 01 	sts	0x010D, r24
 31e:	23 c0       	rjmp	.+70     	; 0x366 <UART_Determine_Digit_Numbers+0x6e>
 320:	bb 24       	eor	r11, r11
  }else{
    while(num!=0){
      UART.Digits[i]=num%10;
 322:	0b 2d       	mov	r16, r11
 324:	10 e0       	ldi	r17, 0x00	; 0
 326:	0c 5f       	subi	r16, 0xFC	; 252
 328:	1e 4f       	sbci	r17, 0xFE	; 254
 32a:	c7 01       	movw	r24, r14
 32c:	b6 01       	movw	r22, r12
 32e:	2a e0       	ldi	r18, 0x0A	; 10
 330:	30 e0       	ldi	r19, 0x00	; 0
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	50 e0       	ldi	r21, 0x00	; 0
 336:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodsi4>
 33a:	f8 01       	movw	r30, r16
 33c:	61 83       	std	Z+1, r22	; 0x01
      num/=10;
 33e:	c7 01       	movw	r24, r14
 340:	b6 01       	movw	r22, r12
 342:	2a e0       	ldi	r18, 0x0A	; 10
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	50 e0       	ldi	r21, 0x00	; 0
 34a:	0e 94 4c 03 	call	0x698	; 0x698 <__udivmodsi4>
 34e:	c9 01       	movw	r24, r18
 350:	da 01       	movw	r26, r20
 352:	6c 01       	movw	r12, r24
 354:	7d 01       	movw	r14, r26
      i++;
 356:	b3 94       	inc	r11
  uint8_t i=0;
  if(num==0){
    UART.Digits[0]=0;
    UART.InputNumberDigits=1;
  }else{
    while(num!=0){
 358:	c1 14       	cp	r12, r1
 35a:	d1 04       	cpc	r13, r1
 35c:	e1 04       	cpc	r14, r1
 35e:	f1 04       	cpc	r15, r1
 360:	01 f7       	brne	.-64     	; 0x322 <UART_Determine_Digit_Numbers+0x2a>
      UART.Digits[i]=num%10;
      num/=10;
      i++;
    }
	UART.InputNumberDigits=i;
 362:	b0 92 0d 01 	sts	0x010D, r11
  }
}
 366:	1f 91       	pop	r17
 368:	0f 91       	pop	r16
 36a:	ff 90       	pop	r15
 36c:	ef 90       	pop	r14
 36e:	df 90       	pop	r13
 370:	cf 90       	pop	r12
 372:	bf 90       	pop	r11
 374:	08 95       	ret

00000376 <UART_Transmit_Number_Digits>:

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 376:	90 91 0d 01 	lds	r25, 0x010D
 37a:	0f c0       	rjmp	.+30     	; 0x39a <UART_Transmit_Number_Digits+0x24>
    uint8_t temp=i;
    temp-=1;
 37c:	29 2f       	mov	r18, r25
 37e:	21 50       	subi	r18, 0x01	; 1
    temp=UART.Digits[temp];
 380:	e2 2f       	mov	r30, r18
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	ec 5f       	subi	r30, 0xFC	; 252
 386:	fe 4f       	sbci	r31, 0xFE	; 254
 388:	81 81       	ldd	r24, Z+1	; 0x01
    temp+=48;
 38a:	80 5d       	subi	r24, 0xD0	; 208
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 38c:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 390:	80 91 c0 00 	lds	r24, 0x00C0
 394:	92 2f       	mov	r25, r18
 396:	85 ff       	sbrs	r24, 5
 398:	fb cf       	rjmp	.-10     	; 0x390 <UART_Transmit_Number_Digits+0x1a>
	UART.InputNumberDigits=i;
  }
}

void UART_Transmit_Number_Digits(void){
  for(uint8_t i=UART.InputNumberDigits; i>0; i--){
 39a:	99 23       	and	r25, r25
 39c:	79 f7       	brne	.-34     	; 0x37c <UART_Transmit_Number_Digits+0x6>
    temp-=1;
    temp=UART.Digits[temp];
    temp+=48;
    UART_Transmit_Byte(temp);
  }
}
 39e:	08 95       	ret

000003a0 <UART_Transmit_Number>:

void UART_Transmit_Number(int32_t num){
 3a0:	9b 01       	movw	r18, r22
 3a2:	ac 01       	movw	r20, r24
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 3a4:	97 ff       	sbrs	r25, 7
 3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <UART_Transmit_Number+0x24>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 3a8:	8d e2       	ldi	r24, 0x2D	; 45
 3aa:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 3ae:	80 91 c0 00 	lds	r24, 0x00C0
 3b2:	85 ff       	sbrs	r24, 5
 3b4:	fc cf       	rjmp	.-8      	; 0x3ae <UART_Transmit_Number+0xe>
    UART_Transmit_Byte(temp);
  }
}

void UART_Transmit_Number(int32_t num){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 3b6:	50 95       	com	r21
 3b8:	40 95       	com	r20
 3ba:	30 95       	com	r19
 3bc:	21 95       	neg	r18
 3be:	3f 4f       	sbci	r19, 0xFF	; 255
 3c0:	4f 4f       	sbci	r20, 0xFF	; 255
 3c2:	5f 4f       	sbci	r21, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 3c4:	ca 01       	movw	r24, r20
 3c6:	b9 01       	movw	r22, r18
 3c8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <UART_Determine_Digit_Numbers>
  UART_Transmit_Number_Digits();
 3cc:	0e 94 bb 01 	call	0x376	; 0x376 <UART_Transmit_Number_Digits>
}
 3d0:	08 95       	ret

000003d2 <UART_Transmit_Fixed_Digit_Number>:

void UART_Transmit_Fixed_Digit_Number(int32_t num, uint8_t digits){
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	8b 01       	movw	r16, r22
 3da:	9c 01       	movw	r18, r24
 3dc:	f4 2e       	mov	r15, r20
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 3de:	97 ff       	sbrs	r25, 7
 3e0:	0e c0       	rjmp	.+28     	; 0x3fe <UART_Transmit_Fixed_Digit_Number+0x2c>
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 3e2:	8d e2       	ldi	r24, 0x2D	; 45
 3e4:	80 93 c6 00 	sts	0x00C6, r24
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 3e8:	80 91 c0 00 	lds	r24, 0x00C0
 3ec:	85 ff       	sbrs	r24, 5
 3ee:	fc cf       	rjmp	.-8      	; 0x3e8 <UART_Transmit_Fixed_Digit_Number+0x16>
  UART_Determine_Digit_Numbers((uint32_t)num);
  UART_Transmit_Number_Digits();
}

void UART_Transmit_Fixed_Digit_Number(int32_t num, uint8_t digits){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
 3f0:	30 95       	com	r19
 3f2:	20 95       	com	r18
 3f4:	10 95       	com	r17
 3f6:	01 95       	neg	r16
 3f8:	1f 4f       	sbci	r17, 0xFF	; 255
 3fa:	2f 4f       	sbci	r18, 0xFF	; 255
 3fc:	3f 4f       	sbci	r19, 0xFF	; 255
  UART_Determine_Digit_Numbers((uint32_t)num);
 3fe:	c9 01       	movw	r24, r18
 400:	b8 01       	movw	r22, r16
 402:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <UART_Determine_Digit_Numbers>
  for(int i=0;i<(digits-UART.InputNumberDigits);i++){
 406:	4f 2d       	mov	r20, r15
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	80 91 0d 01 	lds	r24, 0x010D
 40e:	48 1b       	sub	r20, r24
 410:	51 09       	sbc	r21, r1
 412:	20 e0       	ldi	r18, 0x00	; 0
 414:	30 e0       	ldi	r19, 0x00	; 0
      UART_Config_Receiver_Interrupt();
    }
}

void UART_Transmit_Byte(uint8_t val){
    UDRx_REG=val;
 416:	90 e3       	ldi	r25, 0x30	; 48
 418:	08 c0       	rjmp	.+16     	; 0x42a <UART_Transmit_Fixed_Digit_Number+0x58>
 41a:	90 93 c6 00 	sts	0x00C6, r25
    while((UCSRxA_REG & UCSRxA_UDREx_bm)==0);
 41e:	80 91 c0 00 	lds	r24, 0x00C0
 422:	85 ff       	sbrs	r24, 5
 424:	fc cf       	rjmp	.-8      	; 0x41e <UART_Transmit_Fixed_Digit_Number+0x4c>
}

void UART_Transmit_Fixed_Digit_Number(int32_t num, uint8_t digits){
  if(num<0){UART_Transmit_Byte('-');num=-num;}
  UART_Determine_Digit_Numbers((uint32_t)num);
  for(int i=0;i<(digits-UART.InputNumberDigits);i++){
 426:	2f 5f       	subi	r18, 0xFF	; 255
 428:	3f 4f       	sbci	r19, 0xFF	; 255
 42a:	24 17       	cp	r18, r20
 42c:	35 07       	cpc	r19, r21
 42e:	ac f3       	brlt	.-22     	; 0x41a <UART_Transmit_Fixed_Digit_Number+0x48>
    UART_Transmit_Byte(48);
  }
  UART_Transmit_Number_Digits();
 430:	0e 94 bb 01 	call	0x376	; 0x376 <UART_Transmit_Number_Digits>
}
 434:	1f 91       	pop	r17
 436:	0f 91       	pop	r16
 438:	ff 90       	pop	r15
 43a:	08 95       	ret

0000043c <UART_Print_Debug_Data>:

void UART_Print_Debug_Data(int *data_in){
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	0f 93       	push	r16
 442:	1f 93       	push	r17
 444:	cf 93       	push	r28
 446:	df 93       	push	r29
 448:	7c 01       	movw	r14, r24
 44a:	8c 01       	movw	r16, r24
 44c:	c1 e0       	ldi	r28, 0x01	; 1
 44e:	d0 e0       	ldi	r29, 0x00	; 0
 450:	0f c0       	rjmp	.+30     	; 0x470 <UART_Print_Debug_Data+0x34>
  for(int i=1;i<=data_in[0];i++){
    UART_Transmit_Fixed_Digit_Number(data_in[i], 4);
 452:	f8 01       	movw	r30, r16
 454:	60 81       	ld	r22, Z
 456:	71 81       	ldd	r23, Z+1	; 0x01
 458:	88 27       	eor	r24, r24
 45a:	77 fd       	sbrc	r23, 7
 45c:	80 95       	com	r24
 45e:	98 2f       	mov	r25, r24
 460:	44 e0       	ldi	r20, 0x04	; 4
 462:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <UART_Transmit_Fixed_Digit_Number>
    UART_Transmit_Text("  ");
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	91 e0       	ldi	r25, 0x01	; 1
 46a:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <UART_Transmit_Text>
  }
  UART_Transmit_Number_Digits();
}

void UART_Print_Debug_Data(int *data_in){
  for(int i=1;i<=data_in[0];i++){
 46e:	21 96       	adiw	r28, 0x01	; 1
 470:	0e 5f       	subi	r16, 0xFE	; 254
 472:	1f 4f       	sbci	r17, 0xFF	; 255
 474:	f7 01       	movw	r30, r14
 476:	80 81       	ld	r24, Z
 478:	91 81       	ldd	r25, Z+1	; 0x01
 47a:	8c 17       	cp	r24, r28
 47c:	9d 07       	cpc	r25, r29
 47e:	4c f7       	brge	.-46     	; 0x452 <UART_Print_Debug_Data+0x16>
    UART_Transmit_Fixed_Digit_Number(data_in[i], 4);
    UART_Transmit_Text("  ");
  }
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	08 95       	ret

0000048e <UART_Receive_Byte>:

uint8_t UART_Receive_Byte(void){
 48e:	df 93       	push	r29
 490:	cf 93       	push	r28
 492:	0f 92       	push	r0
 494:	cd b7       	in	r28, 0x3d	; 61
 496:	de b7       	in	r29, 0x3e	; 62
  volatile uint8_t val=0;
 498:	19 82       	std	Y+1, r1	; 0x01
  if(UCSRxA_REG & UCSRxA_FEx_bm){
 49a:	80 91 c0 00 	lds	r24, 0x00C0
 49e:	84 ff       	sbrs	r24, 4
 4a0:	05 c0       	rjmp	.+10     	; 0x4ac <UART_Receive_Byte+0x1e>
    val=UDRx_REG;
 4a2:	80 91 c6 00 	lds	r24, 0x00C6
 4a6:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x01;
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	08 c0       	rjmp	.+16     	; 0x4bc <UART_Receive_Byte+0x2e>
  }else if(UCSRxA_REG & UCSRxA_DORx_bm){
 4ac:	80 91 c0 00 	lds	r24, 0x00C0
 4b0:	83 ff       	sbrs	r24, 3
 4b2:	07 c0       	rjmp	.+14     	; 0x4c2 <UART_Receive_Byte+0x34>
    val=UDRx_REG;
 4b4:	80 91 c6 00 	lds	r24, 0x00C6
 4b8:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x02;
 4ba:	82 e0       	ldi	r24, 0x02	; 2
 4bc:	80 93 04 01 	sts	0x0104, r24
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <UART_Receive_Byte+0x3e>
  }else{
    val=UDRx_REG;
 4c2:	80 91 c6 00 	lds	r24, 0x00C6
 4c6:	89 83       	std	Y+1, r24	; 0x01
    UART.Error=0x00;
 4c8:	10 92 04 01 	sts	0x0104, r1
  }
return val;
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
}
 4ce:	0f 90       	pop	r0
 4d0:	cf 91       	pop	r28
 4d2:	df 91       	pop	r29
 4d4:	08 95       	ret

000004d6 <UART_Read_From_Buffer>:


uint8_t UART_Read_From_Buffer(uint16_t index){
    return UART.Buffer[index];
 4d6:	fc 01       	movw	r30, r24
 4d8:	ec 5f       	subi	r30, 0xFC	; 252
 4da:	fe 4f       	sbci	r31, 0xFE	; 254
 4dc:	82 85       	ldd	r24, Z+10	; 0x0a
}
 4de:	08 95       	ret

000004e0 <UART_Current_Buffer_Index>:

uint16_t UART_Current_Buffer_Index(void){
    return UART.BufferIndex;
 4e0:	20 91 0a 02 	lds	r18, 0x020A
 4e4:	30 91 0b 02 	lds	r19, 0x020B
}
 4e8:	c9 01       	movw	r24, r18
 4ea:	08 95       	ret

000004ec <UART_Current_Read_Index>:

uint16_t UART_Current_Read_Index(void){
    return UART.ReadIndex;
 4ec:	20 91 0e 02 	lds	r18, 0x020E
 4f0:	30 91 0f 02 	lds	r19, 0x020F
}
 4f4:	c9 01       	movw	r24, r18
 4f6:	08 95       	ret

000004f8 <UART_Bytes_Available_To_Read>:

uint16_t UART_Bytes_Available_To_Read(void){
    return UART.AvailableBytes;
 4f8:	20 91 0c 02 	lds	r18, 0x020C
 4fc:	30 91 0d 02 	lds	r19, 0x020D
}
 500:	c9 01       	movw	r24, r18
 502:	08 95       	ret

00000504 <UART_Read>:

uint8_t UART_Read(void){
    uint8_t current_byte=UART.Buffer[UART.ReadIndex];
 504:	e0 91 0e 02 	lds	r30, 0x020E
 508:	f0 91 0f 02 	lds	r31, 0x020F
 50c:	ec 5f       	subi	r30, 0xFC	; 252
 50e:	fe 4f       	sbci	r31, 0xFE	; 254
 510:	42 85       	ldd	r20, Z+10	; 0x0a
    UART.ReadIndex++;
 512:	80 91 0e 02 	lds	r24, 0x020E
 516:	90 91 0f 02 	lds	r25, 0x020F
 51a:	01 96       	adiw	r24, 0x01	; 1
 51c:	90 93 0f 02 	sts	0x020F, r25
 520:	80 93 0e 02 	sts	0x020E, r24
    if(UART.ReadIndex>=UART.BufferSize){
 524:	20 91 0e 02 	lds	r18, 0x020E
 528:	30 91 0f 02 	lds	r19, 0x020F
 52c:	80 91 08 02 	lds	r24, 0x0208
 530:	90 91 09 02 	lds	r25, 0x0209
 534:	28 17       	cp	r18, r24
 536:	39 07       	cpc	r19, r25
 538:	20 f0       	brcs	.+8      	; 0x542 <UART_Read+0x3e>
      UART.ReadIndex=0;
 53a:	10 92 0f 02 	sts	0x020F, r1
 53e:	10 92 0e 02 	sts	0x020E, r1
    }
    if(UART.AvailableBytes>0){
 542:	80 91 0c 02 	lds	r24, 0x020C
 546:	90 91 0d 02 	lds	r25, 0x020D
 54a:	89 2b       	or	r24, r25
 54c:	49 f0       	breq	.+18     	; 0x560 <UART_Read+0x5c>
        UART.AvailableBytes--;
 54e:	80 91 0c 02 	lds	r24, 0x020C
 552:	90 91 0d 02 	lds	r25, 0x020D
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	90 93 0d 02 	sts	0x020D, r25
 55c:	80 93 0c 02 	sts	0x020C, r24
    }
  return current_byte;
}
 560:	84 2f       	mov	r24, r20
 562:	08 95       	ret

00000564 <UART_Flush_Buffer>:

void UART_Flush_Buffer(void){
    UART.Error=0x00;
 564:	10 92 04 01 	sts	0x0104, r1
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	06 c0       	rjmp	.+12     	; 0x57a <UART_Flush_Buffer+0x16>
    for(uint16_t i=0;i<UART.BufferSize;i++){
        UART.Buffer[i]=0x00;
 56e:	f9 01       	movw	r30, r18
 570:	ec 5f       	subi	r30, 0xFC	; 252
 572:	fe 4f       	sbci	r31, 0xFE	; 254
 574:	12 86       	std	Z+10, r1	; 0x0a
  return current_byte;
}

void UART_Flush_Buffer(void){
    UART.Error=0x00;
    for(uint16_t i=0;i<UART.BufferSize;i++){
 576:	2f 5f       	subi	r18, 0xFF	; 255
 578:	3f 4f       	sbci	r19, 0xFF	; 255
 57a:	80 91 08 02 	lds	r24, 0x0208
 57e:	90 91 09 02 	lds	r25, 0x0209
 582:	28 17       	cp	r18, r24
 584:	39 07       	cpc	r19, r25
 586:	98 f3       	brcs	.-26     	; 0x56e <UART_Flush_Buffer+0xa>
        UART.Buffer[i]=0x00;
    }
    UART.ReadIndex=0;
 588:	10 92 0f 02 	sts	0x020F, r1
 58c:	10 92 0e 02 	sts	0x020E, r1
    UART.BufferIndex=0;
 590:	10 92 0b 02 	sts	0x020B, r1
 594:	10 92 0a 02 	sts	0x020A, r1
    UART.AvailableBytes=0;
 598:	10 92 0d 02 	sts	0x020D, r1
 59c:	10 92 0c 02 	sts	0x020C, r1
}
 5a0:	08 95       	ret

000005a2 <UART_Last_Byte_Recevied_Time_Stamp>:

uint32_t UART_Last_Byte_Recevied_Time_Stamp(void){
    return UART.LastRecivedTimeStamp;
 5a2:	20 91 10 02 	lds	r18, 0x0210
 5a6:	30 91 11 02 	lds	r19, 0x0211
 5aa:	40 91 12 02 	lds	r20, 0x0212
 5ae:	50 91 13 02 	lds	r21, 0x0213
}
 5b2:	b9 01       	movw	r22, r18
 5b4:	ca 01       	movw	r24, r20
 5b6:	08 95       	ret

000005b8 <UART_Interrupt_Service_Routine>:

void UART_Interrupt_Service_Routine(void){
 5b8:	df 93       	push	r29
 5ba:	cf 93       	push	r28
 5bc:	0f 92       	push	r0
 5be:	cd b7       	in	r28, 0x3d	; 61
 5c0:	de b7       	in	r29, 0x3e	; 62
    volatile uint8_t received_byte=UART_Receive_Byte();
 5c2:	0e 94 47 02 	call	0x48e	; 0x48e <UART_Receive_Byte>
 5c6:	89 83       	std	Y+1, r24	; 0x01
    if(UART.Error==0x00){
 5c8:	80 91 04 01 	lds	r24, 0x0104
 5cc:	88 23       	and	r24, r24
 5ce:	e1 f5       	brne	.+120    	; 0x648 <UART_Interrupt_Service_Routine+0x90>
         UART.Buffer[UART.BufferIndex]=received_byte;
 5d0:	e0 91 0a 02 	lds	r30, 0x020A
 5d4:	f0 91 0b 02 	lds	r31, 0x020B
 5d8:	89 81       	ldd	r24, Y+1	; 0x01
 5da:	ec 5f       	subi	r30, 0xFC	; 252
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	82 87       	std	Z+10, r24	; 0x0a
         UART.BufferIndex++;
 5e0:	80 91 0a 02 	lds	r24, 0x020A
 5e4:	90 91 0b 02 	lds	r25, 0x020B
 5e8:	01 96       	adiw	r24, 0x01	; 1
 5ea:	90 93 0b 02 	sts	0x020B, r25
 5ee:	80 93 0a 02 	sts	0x020A, r24
         UART.AvailableBytes++;
 5f2:	80 91 0c 02 	lds	r24, 0x020C
 5f6:	90 91 0d 02 	lds	r25, 0x020D
 5fa:	01 96       	adiw	r24, 0x01	; 1
 5fc:	90 93 0d 02 	sts	0x020D, r25
 600:	80 93 0c 02 	sts	0x020C, r24
		 if(UART.AvailableBytes>UART.BufferSize){UART.AvailableBytes=UART.BufferSize;}
 604:	20 91 0c 02 	lds	r18, 0x020C
 608:	30 91 0d 02 	lds	r19, 0x020D
 60c:	80 91 08 02 	lds	r24, 0x0208
 610:	90 91 09 02 	lds	r25, 0x0209
 614:	82 17       	cp	r24, r18
 616:	93 07       	cpc	r25, r19
 618:	40 f4       	brcc	.+16     	; 0x62a <UART_Interrupt_Service_Routine+0x72>
 61a:	80 91 08 02 	lds	r24, 0x0208
 61e:	90 91 09 02 	lds	r25, 0x0209
 622:	90 93 0d 02 	sts	0x020D, r25
 626:	80 93 0c 02 	sts	0x020C, r24
         if(UART.BufferIndex>=UART.BufferSize){UART.BufferIndex=0;}
 62a:	20 91 0a 02 	lds	r18, 0x020A
 62e:	30 91 0b 02 	lds	r19, 0x020B
 632:	80 91 08 02 	lds	r24, 0x0208
 636:	90 91 09 02 	lds	r25, 0x0209
 63a:	28 17       	cp	r18, r24
 63c:	39 07       	cpc	r19, r25
 63e:	20 f0       	brcs	.+8      	; 0x648 <UART_Interrupt_Service_Routine+0x90>
 640:	10 92 0b 02 	sts	0x020B, r1
 644:	10 92 0a 02 	sts	0x020A, r1
         //UART.LastRecivedTimeStamp=millis();
    }
}
 648:	0f 90       	pop	r0
 64a:	cf 91       	pop	r28
 64c:	df 91       	pop	r29
 64e:	08 95       	ret

00000650 <__vector_18>:

ISR(USART_RX_vect){
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	2f 93       	push	r18
 65c:	3f 93       	push	r19
 65e:	4f 93       	push	r20
 660:	5f 93       	push	r21
 662:	6f 93       	push	r22
 664:	7f 93       	push	r23
 666:	8f 93       	push	r24
 668:	9f 93       	push	r25
 66a:	af 93       	push	r26
 66c:	bf 93       	push	r27
 66e:	ef 93       	push	r30
 670:	ff 93       	push	r31
  UART_Interrupt_Service_Routine();
 672:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <UART_Interrupt_Service_Routine>
 676:	ff 91       	pop	r31
 678:	ef 91       	pop	r30
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	7f 91       	pop	r23
 684:	6f 91       	pop	r22
 686:	5f 91       	pop	r21
 688:	4f 91       	pop	r20
 68a:	3f 91       	pop	r19
 68c:	2f 91       	pop	r18
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__udivmodsi4>:
 698:	a1 e2       	ldi	r26, 0x21	; 33
 69a:	1a 2e       	mov	r1, r26
 69c:	aa 1b       	sub	r26, r26
 69e:	bb 1b       	sub	r27, r27
 6a0:	fd 01       	movw	r30, r26
 6a2:	0d c0       	rjmp	.+26     	; 0x6be <__udivmodsi4_ep>

000006a4 <__udivmodsi4_loop>:
 6a4:	aa 1f       	adc	r26, r26
 6a6:	bb 1f       	adc	r27, r27
 6a8:	ee 1f       	adc	r30, r30
 6aa:	ff 1f       	adc	r31, r31
 6ac:	a2 17       	cp	r26, r18
 6ae:	b3 07       	cpc	r27, r19
 6b0:	e4 07       	cpc	r30, r20
 6b2:	f5 07       	cpc	r31, r21
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__udivmodsi4_ep>
 6b6:	a2 1b       	sub	r26, r18
 6b8:	b3 0b       	sbc	r27, r19
 6ba:	e4 0b       	sbc	r30, r20
 6bc:	f5 0b       	sbc	r31, r21

000006be <__udivmodsi4_ep>:
 6be:	66 1f       	adc	r22, r22
 6c0:	77 1f       	adc	r23, r23
 6c2:	88 1f       	adc	r24, r24
 6c4:	99 1f       	adc	r25, r25
 6c6:	1a 94       	dec	r1
 6c8:	69 f7       	brne	.-38     	; 0x6a4 <__udivmodsi4_loop>
 6ca:	60 95       	com	r22
 6cc:	70 95       	com	r23
 6ce:	80 95       	com	r24
 6d0:	90 95       	com	r25
 6d2:	9b 01       	movw	r18, r22
 6d4:	ac 01       	movw	r20, r24
 6d6:	bd 01       	movw	r22, r26
 6d8:	cf 01       	movw	r24, r30
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
